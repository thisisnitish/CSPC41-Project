State 9 conflicts: 1 shift/reduce
State 37 conflicts: 1 shift/reduce
State 41 conflicts: 8 shift/reduce
State 50 conflicts: 8 shift/reduce, 2 reduce/reduce
State 60 conflicts: 8 shift/reduce, 10 reduce/reduce
State 141 conflicts: 8 shift/reduce
State 143 conflicts: 9 shift/reduce
State 151 conflicts: 8 shift/reduce
State 152 conflicts: 9 shift/reduce


Grammar

    0 $accept: begin $end

    1 $@1: %empty

    2 $@2: %empty

    3 $@3: %empty

    4 $@4: %empty

    5 $@5: %empty

    6 begin: header datatypes identifiers $@1 '(' $@2 normalFuncArg ')' $@3 '{' $@4 funcCode $@5 funcReturn '}'

    7 header: header header
    8       | INCLUDE

    9 datatypes: INT
   10          | FLOAT
   11          | CHAR
   12          | VOID

   13 $@6: %empty

   14 normalFuncArg: normalFuncArg ',' $@6 normalFuncArg
   15              | datatypes pointerFuncArg terminate
   16              | pointerFuncArg terminate

   17 terminate: ';'
   18          | %empty

   19 $@7: %empty

   20 pointerFuncArg: identifiers $@7 arrayFuncArg

   21 $@8: %empty

   22 pointerFuncArg: '*' $@8 pointerFuncArg

   23 $@9: %empty

   24 $@10: %empty

   25 arrayFuncArg: '[' $@9 NUM $@10 ']' arrayFuncArg
   26             | '[' identifiers ']' arrayFuncArg

   27 $@11: %empty

   28 arrayFuncArg: '[' $@11 ']' arrayFuncArg
   29             | %empty

   30 $@12: %empty

   31 funcReturn: RETURN NUM $@12 ';'
   32           | RETURN identifiers ';'
   33           | %empty

   34 $@13: %empty

   35 $@14: %empty

   36 $@15: %empty

   37 $@16: %empty

   38 funcCode: IF $@13 '(' logicalCond ')' $@14 '{' $@15 funcCode '}' $@16 EL
   39         | assign
   40         | datatypes identifiers terminate
   41         | funcCode funcCode

   42 $@17: %empty

   43 funcCode: printff $@17 '(' STRLT ')' ';'

   44 $@18: %empty

   45 funcCode: scanff $@18 '(' STRLT ',' '&' identifiers ')' ';'
   46         | %empty

   47 $@19: %empty

   48 $@20: %empty

   49 EL: ELSE $@19 '{' $@20 funcCode '}'
   50   | %empty

   51 Arg: STRLT

   52 logicalCond: logicalCond AND B
   53            | logicalCond OR B
   54            | NE B
   55            | B

   56 B: relationalCond relop relationalCond

   57 $@21: %empty

   58 B: identifiers '=' $@21 relationalCond
   59  | FL
   60  | TR
   61  | identifiers
   62  | NUM

   63 $@22: %empty

   64 assign: identifiers '=' $@22 relationalCond ';'
   65       | identifiers '(' Arg ')' ';'

   66 $@23: %empty

   67 relationalCond: relationalCond '+' $@23 relationalCond

   68 $@24: %empty

   69 relationalCond: relationalCond '-' $@24 relationalCond
   70               | F

   71 $@25: %empty

   72 F: F '*' $@25 F

   73 $@26: %empty

   74 F: F '/' $@26 F
   75  | T

   76 $@27: %empty

   77 T: T '^' $@27 T
   78  | Q

   79 $@28: %empty

   80 Q: '(' $@28 relationalCond ')'

   81 $@29: %empty

   82 Q: identifiers $@29 arrayFuncArg

   83 $@30: %empty

   84 Q: NUM $@30

   85 relop: LE
   86      | GE
   87      | LT
   88      | GT
   89      | EQ


Terminals, with rules where they appear

    $end (0) 0
    '&' (38) 45
    '(' (40) 6 38 43 45 65 80
    ')' (41) 6 38 43 45 65 80
    '*' (42) 22 72
    '+' (43) 67
    ',' (44) 14 45
    '-' (45) 69
    '/' (47) 74
    ';' (59) 17 31 32 43 45 64 65
    '=' (61) 58 64
    '[' (91) 25 26 28
    ']' (93) 25 26 28
    '^' (94) 77
    '{' (123) 6 38 49
    '}' (125) 6 38 49
    error (256)
    IF <nam> (258) 38
    ELSE <nam> (259) 49
    INT <nam> (260) 9
    FLOAT <nam> (261) 10
    CHAR <nam> (262) 11
    VOID (263) 12
    INCLUDE (264) 8
    RETURN (265) 31 32
    LE <nam> (266) 85
    GE <nam> (267) 86
    LT <nam> (268) 87
    GT <nam> (269) 88
    EQ <nam> (270) 89
    NE <nam> (271) 54
    NUM <nam> (272) 25 31 62 84
    AND <nam> (273) 52
    OR <nam> (274) 53
    TR <nam> (275) 60
    FL <nam> (276) 59
    STRLT <nam> (277) 43 45 51
    identifiers <nam> (278) 6 20 26 32 40 45 58 61 64 65 82
    printff <nam> (279) 43
    scanff <nam> (280) 45


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    begin <nam> (42)
        on left: 6
        on right: 0
    $@1 (43)
        on left: 1
        on right: 6
    $@2 (44)
        on left: 2
        on right: 6
    $@3 (45)
        on left: 3
        on right: 6
    $@4 (46)
        on left: 4
        on right: 6
    $@5 (47)
        on left: 5
        on right: 6
    header <nam> (48)
        on left: 7 8
        on right: 6 7
    datatypes <nam> (49)
        on left: 9 10 11 12
        on right: 6 15 40
    normalFuncArg <nam> (50)
        on left: 14 15 16
        on right: 6 14
    $@6 (51)
        on left: 13
        on right: 14
    terminate <nam> (52)
        on left: 17 18
        on right: 15 16 40
    pointerFuncArg <nam> (53)
        on left: 20 22
        on right: 15 16 22
    $@7 (54)
        on left: 19
        on right: 20
    $@8 (55)
        on left: 21
        on right: 22
    arrayFuncArg <nam> (56)
        on left: 25 26 28 29
        on right: 20 25 26 28 82
    $@9 (57)
        on left: 23
        on right: 25
    $@10 (58)
        on left: 24
        on right: 25
    $@11 (59)
        on left: 27
        on right: 28
    funcReturn <nam> (60)
        on left: 31 32 33
        on right: 6
    $@12 (61)
        on left: 30
        on right: 31
    funcCode <nam> (62)
        on left: 38 39 40 41 43 45 46
        on right: 6 38 41 49
    $@13 (63)
        on left: 34
        on right: 38
    $@14 (64)
        on left: 35
        on right: 38
    $@15 (65)
        on left: 36
        on right: 38
    $@16 (66)
        on left: 37
        on right: 38
    $@17 (67)
        on left: 42
        on right: 43
    $@18 (68)
        on left: 44
        on right: 45
    EL <nam> (69)
        on left: 49 50
        on right: 38
    $@19 (70)
        on left: 47
        on right: 49
    $@20 (71)
        on left: 48
        on right: 49
    Arg <nam> (72)
        on left: 51
        on right: 65
    logicalCond <gen> (73)
        on left: 52 53 54 55
        on right: 38 52 53
    B <gen> (74)
        on left: 56 58 59 60 61 62
        on right: 52 53 54 55
    $@21 (75)
        on left: 57
        on right: 58
    assign <nam> (76)
        on left: 64 65
        on right: 39
    $@22 (77)
        on left: 63
        on right: 64
    relationalCond <nam> (78)
        on left: 67 69 70
        on right: 56 58 64 67 69 80
    $@23 (79)
        on left: 66
        on right: 67
    $@24 (80)
        on left: 68
        on right: 69
    F <nam> (81)
        on left: 72 74 75
        on right: 70 72 74
    $@25 (82)
        on left: 71
        on right: 72
    $@26 (83)
        on left: 73
        on right: 74
    T <nam> (84)
        on left: 77 78
        on right: 75 77
    $@27 (85)
        on left: 76
        on right: 77
    Q <nam> (86)
        on left: 80 82 84
        on right: 78
    $@28 (87)
        on left: 79
        on right: 80
    $@29 (88)
        on left: 81
        on right: 82
    $@30 (89)
        on left: 83
        on right: 84
    relop <nam> (90)
        on left: 85 86 87 88 89
        on right: 56


State 0

    0 $accept: . begin $end

    INCLUDE  shift, and go to state 1

    begin   go to state 2
    header  go to state 3


State 1

    8 header: INCLUDE .

    $default  reduce using rule 8 (header)


State 2

    0 $accept: begin . $end

    $end  shift, and go to state 4


State 3

    6 begin: header . datatypes identifiers $@1 '(' $@2 normalFuncArg ')' $@3 '{' $@4 funcCode $@5 funcReturn '}'
    7 header: header . header

    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    INCLUDE  shift, and go to state 1

    header     go to state 9
    datatypes  go to state 10


State 4

    0 $accept: begin $end .

    $default  accept


State 5

    9 datatypes: INT .

    $default  reduce using rule 9 (datatypes)


State 6

   10 datatypes: FLOAT .

    $default  reduce using rule 10 (datatypes)


State 7

   11 datatypes: CHAR .

    $default  reduce using rule 11 (datatypes)


State 8

   12 datatypes: VOID .

    $default  reduce using rule 12 (datatypes)


State 9

    7 header: header . header
    7       | header header .

    INCLUDE  shift, and go to state 1

    INCLUDE   [reduce using rule 7 (header)]
    $default  reduce using rule 7 (header)

    header  go to state 9


State 10

    6 begin: header datatypes . identifiers $@1 '(' $@2 normalFuncArg ')' $@3 '{' $@4 funcCode $@5 funcReturn '}'

    identifiers  shift, and go to state 11


State 11

    6 begin: header datatypes identifiers . $@1 '(' $@2 normalFuncArg ')' $@3 '{' $@4 funcCode $@5 funcReturn '}'

    $default  reduce using rule 1 ($@1)

    $@1  go to state 12


State 12

    6 begin: header datatypes identifiers $@1 . '(' $@2 normalFuncArg ')' $@3 '{' $@4 funcCode $@5 funcReturn '}'

    '('  shift, and go to state 13


State 13

    6 begin: header datatypes identifiers $@1 '(' . $@2 normalFuncArg ')' $@3 '{' $@4 funcCode $@5 funcReturn '}'

    $default  reduce using rule 2 ($@2)

    $@2  go to state 14


State 14

    6 begin: header datatypes identifiers $@1 '(' $@2 . normalFuncArg ')' $@3 '{' $@4 funcCode $@5 funcReturn '}'

    INT          shift, and go to state 5
    FLOAT        shift, and go to state 6
    CHAR         shift, and go to state 7
    VOID         shift, and go to state 8
    identifiers  shift, and go to state 15
    '*'          shift, and go to state 16

    datatypes       go to state 17
    normalFuncArg   go to state 18
    pointerFuncArg  go to state 19


State 15

   20 pointerFuncArg: identifiers . $@7 arrayFuncArg

    $default  reduce using rule 19 ($@7)

    $@7  go to state 20


State 16

   22 pointerFuncArg: '*' . $@8 pointerFuncArg

    $default  reduce using rule 21 ($@8)

    $@8  go to state 21


State 17

   15 normalFuncArg: datatypes . pointerFuncArg terminate

    identifiers  shift, and go to state 15
    '*'          shift, and go to state 16

    pointerFuncArg  go to state 22


State 18

    6 begin: header datatypes identifiers $@1 '(' $@2 normalFuncArg . ')' $@3 '{' $@4 funcCode $@5 funcReturn '}'
   14 normalFuncArg: normalFuncArg . ',' $@6 normalFuncArg

    ')'  shift, and go to state 23
    ','  shift, and go to state 24


State 19

   16 normalFuncArg: pointerFuncArg . terminate

    ';'  shift, and go to state 25

    $default  reduce using rule 18 (terminate)

    terminate  go to state 26


State 20

   20 pointerFuncArg: identifiers $@7 . arrayFuncArg

    '['  shift, and go to state 27

    $default  reduce using rule 29 (arrayFuncArg)

    arrayFuncArg  go to state 28


State 21

   22 pointerFuncArg: '*' $@8 . pointerFuncArg

    identifiers  shift, and go to state 15
    '*'          shift, and go to state 16

    pointerFuncArg  go to state 29


State 22

   15 normalFuncArg: datatypes pointerFuncArg . terminate

    ';'  shift, and go to state 25

    $default  reduce using rule 18 (terminate)

    terminate  go to state 30


State 23

    6 begin: header datatypes identifiers $@1 '(' $@2 normalFuncArg ')' . $@3 '{' $@4 funcCode $@5 funcReturn '}'

    $default  reduce using rule 3 ($@3)

    $@3  go to state 31


State 24

   14 normalFuncArg: normalFuncArg ',' . $@6 normalFuncArg

    $default  reduce using rule 13 ($@6)

    $@6  go to state 32


State 25

   17 terminate: ';' .

    $default  reduce using rule 17 (terminate)


State 26

   16 normalFuncArg: pointerFuncArg terminate .

    $default  reduce using rule 16 (normalFuncArg)


State 27

   25 arrayFuncArg: '[' . $@9 NUM $@10 ']' arrayFuncArg
   26             | '[' . identifiers ']' arrayFuncArg
   28             | '[' . $@11 ']' arrayFuncArg

    identifiers  shift, and go to state 33

    ']'       reduce using rule 27 ($@11)
    $default  reduce using rule 23 ($@9)

    $@9   go to state 34
    $@11  go to state 35


State 28

   20 pointerFuncArg: identifiers $@7 arrayFuncArg .

    $default  reduce using rule 20 (pointerFuncArg)


State 29

   22 pointerFuncArg: '*' $@8 pointerFuncArg .

    $default  reduce using rule 22 (pointerFuncArg)


State 30

   15 normalFuncArg: datatypes pointerFuncArg terminate .

    $default  reduce using rule 15 (normalFuncArg)


State 31

    6 begin: header datatypes identifiers $@1 '(' $@2 normalFuncArg ')' $@3 . '{' $@4 funcCode $@5 funcReturn '}'

    '{'  shift, and go to state 36


State 32

   14 normalFuncArg: normalFuncArg ',' $@6 . normalFuncArg

    INT          shift, and go to state 5
    FLOAT        shift, and go to state 6
    CHAR         shift, and go to state 7
    VOID         shift, and go to state 8
    identifiers  shift, and go to state 15
    '*'          shift, and go to state 16

    datatypes       go to state 17
    normalFuncArg   go to state 37
    pointerFuncArg  go to state 19


State 33

   26 arrayFuncArg: '[' identifiers . ']' arrayFuncArg

    ']'  shift, and go to state 38


State 34

   25 arrayFuncArg: '[' $@9 . NUM $@10 ']' arrayFuncArg

    NUM  shift, and go to state 39


State 35

   28 arrayFuncArg: '[' $@11 . ']' arrayFuncArg

    ']'  shift, and go to state 40


State 36

    6 begin: header datatypes identifiers $@1 '(' $@2 normalFuncArg ')' $@3 '{' . $@4 funcCode $@5 funcReturn '}'

    $default  reduce using rule 4 ($@4)

    $@4  go to state 41


State 37

   14 normalFuncArg: normalFuncArg . ',' $@6 normalFuncArg
   14              | normalFuncArg ',' $@6 normalFuncArg .

    ','  shift, and go to state 24

    ','       [reduce using rule 14 (normalFuncArg)]
    $default  reduce using rule 14 (normalFuncArg)


State 38

   26 arrayFuncArg: '[' identifiers ']' . arrayFuncArg

    '['  shift, and go to state 27

    $default  reduce using rule 29 (arrayFuncArg)

    arrayFuncArg  go to state 42


State 39

   25 arrayFuncArg: '[' $@9 NUM . $@10 ']' arrayFuncArg

    $default  reduce using rule 24 ($@10)

    $@10  go to state 43


State 40

   28 arrayFuncArg: '[' $@11 ']' . arrayFuncArg

    '['  shift, and go to state 27

    $default  reduce using rule 29 (arrayFuncArg)

    arrayFuncArg  go to state 44


State 41

    6 begin: header datatypes identifiers $@1 '(' $@2 normalFuncArg ')' $@3 '{' $@4 . funcCode $@5 funcReturn '}'

    IF           shift, and go to state 45
    INT          shift, and go to state 5
    FLOAT        shift, and go to state 6
    CHAR         shift, and go to state 7
    VOID         shift, and go to state 8
    identifiers  shift, and go to state 46
    printff      shift, and go to state 47
    scanff       shift, and go to state 48

    IF           [reduce using rule 46 (funcCode)]
    INT          [reduce using rule 46 (funcCode)]
    FLOAT        [reduce using rule 46 (funcCode)]
    CHAR         [reduce using rule 46 (funcCode)]
    VOID         [reduce using rule 46 (funcCode)]
    identifiers  [reduce using rule 46 (funcCode)]
    printff      [reduce using rule 46 (funcCode)]
    scanff       [reduce using rule 46 (funcCode)]
    $default     reduce using rule 46 (funcCode)

    datatypes  go to state 49
    funcCode   go to state 50
    assign     go to state 51


State 42

   26 arrayFuncArg: '[' identifiers ']' arrayFuncArg .

    $default  reduce using rule 26 (arrayFuncArg)


State 43

   25 arrayFuncArg: '[' $@9 NUM $@10 . ']' arrayFuncArg

    ']'  shift, and go to state 52


State 44

   28 arrayFuncArg: '[' $@11 ']' arrayFuncArg .

    $default  reduce using rule 28 (arrayFuncArg)


State 45

   38 funcCode: IF . $@13 '(' logicalCond ')' $@14 '{' $@15 funcCode '}' $@16 EL

    $default  reduce using rule 34 ($@13)

    $@13  go to state 53


State 46

   64 assign: identifiers . '=' $@22 relationalCond ';'
   65       | identifiers . '(' Arg ')' ';'

    '='  shift, and go to state 54
    '('  shift, and go to state 55


State 47

   43 funcCode: printff . $@17 '(' STRLT ')' ';'

    $default  reduce using rule 42 ($@17)

    $@17  go to state 56


State 48

   45 funcCode: scanff . $@18 '(' STRLT ',' '&' identifiers ')' ';'

    $default  reduce using rule 44 ($@18)

    $@18  go to state 57


State 49

   40 funcCode: datatypes . identifiers terminate

    identifiers  shift, and go to state 58


State 50

    6 begin: header datatypes identifiers $@1 '(' $@2 normalFuncArg ')' $@3 '{' $@4 funcCode . $@5 funcReturn '}'
   41 funcCode: funcCode . funcCode

    IF           shift, and go to state 45
    INT          shift, and go to state 5
    FLOAT        shift, and go to state 6
    CHAR         shift, and go to state 7
    VOID         shift, and go to state 8
    identifiers  shift, and go to state 46
    printff      shift, and go to state 47
    scanff       shift, and go to state 48

    IF           [reduce using rule 46 (funcCode)]
    INT          [reduce using rule 46 (funcCode)]
    FLOAT        [reduce using rule 46 (funcCode)]
    CHAR         [reduce using rule 46 (funcCode)]
    VOID         [reduce using rule 46 (funcCode)]
    RETURN       reduce using rule 5 ($@5)
    RETURN       [reduce using rule 46 (funcCode)]
    identifiers  [reduce using rule 46 (funcCode)]
    printff      [reduce using rule 46 (funcCode)]
    scanff       [reduce using rule 46 (funcCode)]
    '}'          reduce using rule 5 ($@5)
    '}'          [reduce using rule 46 (funcCode)]
    $default     reduce using rule 5 ($@5)

    $@5        go to state 59
    datatypes  go to state 49
    funcCode   go to state 60
    assign     go to state 51


State 51

   39 funcCode: assign .

    $default  reduce using rule 39 (funcCode)


State 52

   25 arrayFuncArg: '[' $@9 NUM $@10 ']' . arrayFuncArg

    '['  shift, and go to state 27

    $default  reduce using rule 29 (arrayFuncArg)

    arrayFuncArg  go to state 61


State 53

   38 funcCode: IF $@13 . '(' logicalCond ')' $@14 '{' $@15 funcCode '}' $@16 EL

    '('  shift, and go to state 62


State 54

   64 assign: identifiers '=' . $@22 relationalCond ';'

    $default  reduce using rule 63 ($@22)

    $@22  go to state 63


State 55

   65 assign: identifiers '(' . Arg ')' ';'

    STRLT  shift, and go to state 64

    Arg  go to state 65


State 56

   43 funcCode: printff $@17 . '(' STRLT ')' ';'

    '('  shift, and go to state 66


State 57

   45 funcCode: scanff $@18 . '(' STRLT ',' '&' identifiers ')' ';'

    '('  shift, and go to state 67


State 58

   40 funcCode: datatypes identifiers . terminate

    ';'  shift, and go to state 25

    $default  reduce using rule 18 (terminate)

    terminate  go to state 68


State 59

    6 begin: header datatypes identifiers $@1 '(' $@2 normalFuncArg ')' $@3 '{' $@4 funcCode $@5 . funcReturn '}'

    RETURN  shift, and go to state 69

    $default  reduce using rule 33 (funcReturn)

    funcReturn  go to state 70


State 60

   41 funcCode: funcCode . funcCode
   41         | funcCode funcCode .

    IF           shift, and go to state 45
    INT          shift, and go to state 5
    FLOAT        shift, and go to state 6
    CHAR         shift, and go to state 7
    VOID         shift, and go to state 8
    identifiers  shift, and go to state 46
    printff      shift, and go to state 47
    scanff       shift, and go to state 48

    IF           [reduce using rule 41 (funcCode)]
    IF           [reduce using rule 46 (funcCode)]
    INT          [reduce using rule 41 (funcCode)]
    INT          [reduce using rule 46 (funcCode)]
    FLOAT        [reduce using rule 41 (funcCode)]
    FLOAT        [reduce using rule 46 (funcCode)]
    CHAR         [reduce using rule 41 (funcCode)]
    CHAR         [reduce using rule 46 (funcCode)]
    VOID         [reduce using rule 41 (funcCode)]
    VOID         [reduce using rule 46 (funcCode)]
    RETURN       reduce using rule 41 (funcCode)
    RETURN       [reduce using rule 46 (funcCode)]
    identifiers  [reduce using rule 41 (funcCode)]
    identifiers  [reduce using rule 46 (funcCode)]
    printff      [reduce using rule 41 (funcCode)]
    printff      [reduce using rule 46 (funcCode)]
    scanff       [reduce using rule 41 (funcCode)]
    scanff       [reduce using rule 46 (funcCode)]
    '}'          reduce using rule 41 (funcCode)
    '}'          [reduce using rule 46 (funcCode)]
    $default     reduce using rule 41 (funcCode)

    datatypes  go to state 49
    funcCode   go to state 60
    assign     go to state 51


State 61

   25 arrayFuncArg: '[' $@9 NUM $@10 ']' arrayFuncArg .

    $default  reduce using rule 25 (arrayFuncArg)


State 62

   38 funcCode: IF $@13 '(' . logicalCond ')' $@14 '{' $@15 funcCode '}' $@16 EL

    NE           shift, and go to state 71
    NUM          shift, and go to state 72
    TR           shift, and go to state 73
    FL           shift, and go to state 74
    identifiers  shift, and go to state 75
    '('          shift, and go to state 76

    logicalCond     go to state 77
    B               go to state 78
    relationalCond  go to state 79
    F               go to state 80
    T               go to state 81
    Q               go to state 82


State 63

   64 assign: identifiers '=' $@22 . relationalCond ';'

    NUM          shift, and go to state 83
    identifiers  shift, and go to state 84
    '('          shift, and go to state 76

    relationalCond  go to state 85
    F               go to state 80
    T               go to state 81
    Q               go to state 82


State 64

   51 Arg: STRLT .

    $default  reduce using rule 51 (Arg)


State 65

   65 assign: identifiers '(' Arg . ')' ';'

    ')'  shift, and go to state 86


State 66

   43 funcCode: printff $@17 '(' . STRLT ')' ';'

    STRLT  shift, and go to state 87


State 67

   45 funcCode: scanff $@18 '(' . STRLT ',' '&' identifiers ')' ';'

    STRLT  shift, and go to state 88


State 68

   40 funcCode: datatypes identifiers terminate .

    $default  reduce using rule 40 (funcCode)


State 69

   31 funcReturn: RETURN . NUM $@12 ';'
   32           | RETURN . identifiers ';'

    NUM          shift, and go to state 89
    identifiers  shift, and go to state 90


State 70

    6 begin: header datatypes identifiers $@1 '(' $@2 normalFuncArg ')' $@3 '{' $@4 funcCode $@5 funcReturn . '}'

    '}'  shift, and go to state 91


State 71

   54 logicalCond: NE . B

    NUM          shift, and go to state 72
    TR           shift, and go to state 73
    FL           shift, and go to state 74
    identifiers  shift, and go to state 75
    '('          shift, and go to state 76

    B               go to state 92
    relationalCond  go to state 79
    F               go to state 80
    T               go to state 81
    Q               go to state 82


State 72

   62 B: NUM .
   84 Q: NUM . $@30

    AND       reduce using rule 62 (B)
    OR        reduce using rule 62 (B)
    ')'       reduce using rule 62 (B)
    $default  reduce using rule 83 ($@30)

    $@30  go to state 93


State 73

   60 B: TR .

    $default  reduce using rule 60 (B)


State 74

   59 B: FL .

    $default  reduce using rule 59 (B)


State 75

   58 B: identifiers . '=' $@21 relationalCond
   61  | identifiers .
   82 Q: identifiers . $@29 arrayFuncArg

    '='  shift, and go to state 94

    AND       reduce using rule 61 (B)
    OR        reduce using rule 61 (B)
    ')'       reduce using rule 61 (B)
    $default  reduce using rule 81 ($@29)

    $@29  go to state 95


State 76

   80 Q: '(' . $@28 relationalCond ')'

    $default  reduce using rule 79 ($@28)

    $@28  go to state 96


State 77

   38 funcCode: IF $@13 '(' logicalCond . ')' $@14 '{' $@15 funcCode '}' $@16 EL
   52 logicalCond: logicalCond . AND B
   53            | logicalCond . OR B

    AND  shift, and go to state 97
    OR   shift, and go to state 98
    ')'  shift, and go to state 99


State 78

   55 logicalCond: B .

    $default  reduce using rule 55 (logicalCond)


State 79

   56 B: relationalCond . relop relationalCond
   67 relationalCond: relationalCond . '+' $@23 relationalCond
   69               | relationalCond . '-' $@24 relationalCond

    LE   shift, and go to state 100
    GE   shift, and go to state 101
    LT   shift, and go to state 102
    GT   shift, and go to state 103
    EQ   shift, and go to state 104
    '+'  shift, and go to state 105
    '-'  shift, and go to state 106

    relop  go to state 107


State 80

   70 relationalCond: F .
   72 F: F . '*' $@25 F
   74  | F . '/' $@26 F

    '*'  shift, and go to state 108
    '/'  shift, and go to state 109

    $default  reduce using rule 70 (relationalCond)


State 81

   75 F: T .
   77 T: T . '^' $@27 T

    '^'  shift, and go to state 110

    $default  reduce using rule 75 (F)


State 82

   78 T: Q .

    $default  reduce using rule 78 (T)


State 83

   84 Q: NUM . $@30

    $default  reduce using rule 83 ($@30)

    $@30  go to state 93


State 84

   82 Q: identifiers . $@29 arrayFuncArg

    $default  reduce using rule 81 ($@29)

    $@29  go to state 95


State 85

   64 assign: identifiers '=' $@22 relationalCond . ';'
   67 relationalCond: relationalCond . '+' $@23 relationalCond
   69               | relationalCond . '-' $@24 relationalCond

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    ';'  shift, and go to state 111


State 86

   65 assign: identifiers '(' Arg ')' . ';'

    ';'  shift, and go to state 112


State 87

   43 funcCode: printff $@17 '(' STRLT . ')' ';'

    ')'  shift, and go to state 113


State 88

   45 funcCode: scanff $@18 '(' STRLT . ',' '&' identifiers ')' ';'

    ','  shift, and go to state 114


State 89

   31 funcReturn: RETURN NUM . $@12 ';'

    $default  reduce using rule 30 ($@12)

    $@12  go to state 115


State 90

   32 funcReturn: RETURN identifiers . ';'

    ';'  shift, and go to state 116


State 91

    6 begin: header datatypes identifiers $@1 '(' $@2 normalFuncArg ')' $@3 '{' $@4 funcCode $@5 funcReturn '}' .

    $default  reduce using rule 6 (begin)


State 92

   54 logicalCond: NE B .

    $default  reduce using rule 54 (logicalCond)


State 93

   84 Q: NUM $@30 .

    $default  reduce using rule 84 (Q)


State 94

   58 B: identifiers '=' . $@21 relationalCond

    $default  reduce using rule 57 ($@21)

    $@21  go to state 117


State 95

   82 Q: identifiers $@29 . arrayFuncArg

    '['  shift, and go to state 27

    $default  reduce using rule 29 (arrayFuncArg)

    arrayFuncArg  go to state 118


State 96

   80 Q: '(' $@28 . relationalCond ')'

    NUM          shift, and go to state 83
    identifiers  shift, and go to state 84
    '('          shift, and go to state 76

    relationalCond  go to state 119
    F               go to state 80
    T               go to state 81
    Q               go to state 82


State 97

   52 logicalCond: logicalCond AND . B

    NUM          shift, and go to state 72
    TR           shift, and go to state 73
    FL           shift, and go to state 74
    identifiers  shift, and go to state 75
    '('          shift, and go to state 76

    B               go to state 120
    relationalCond  go to state 79
    F               go to state 80
    T               go to state 81
    Q               go to state 82


State 98

   53 logicalCond: logicalCond OR . B

    NUM          shift, and go to state 72
    TR           shift, and go to state 73
    FL           shift, and go to state 74
    identifiers  shift, and go to state 75
    '('          shift, and go to state 76

    B               go to state 121
    relationalCond  go to state 79
    F               go to state 80
    T               go to state 81
    Q               go to state 82


State 99

   38 funcCode: IF $@13 '(' logicalCond ')' . $@14 '{' $@15 funcCode '}' $@16 EL

    $default  reduce using rule 35 ($@14)

    $@14  go to state 122


State 100

   85 relop: LE .

    $default  reduce using rule 85 (relop)


State 101

   86 relop: GE .

    $default  reduce using rule 86 (relop)


State 102

   87 relop: LT .

    $default  reduce using rule 87 (relop)


State 103

   88 relop: GT .

    $default  reduce using rule 88 (relop)


State 104

   89 relop: EQ .

    $default  reduce using rule 89 (relop)


State 105

   67 relationalCond: relationalCond '+' . $@23 relationalCond

    $default  reduce using rule 66 ($@23)

    $@23  go to state 123


State 106

   69 relationalCond: relationalCond '-' . $@24 relationalCond

    $default  reduce using rule 68 ($@24)

    $@24  go to state 124


State 107

   56 B: relationalCond relop . relationalCond

    NUM          shift, and go to state 83
    identifiers  shift, and go to state 84
    '('          shift, and go to state 76

    relationalCond  go to state 125
    F               go to state 80
    T               go to state 81
    Q               go to state 82


State 108

   72 F: F '*' . $@25 F

    $default  reduce using rule 71 ($@25)

    $@25  go to state 126


State 109

   74 F: F '/' . $@26 F

    $default  reduce using rule 73 ($@26)

    $@26  go to state 127


State 110

   77 T: T '^' . $@27 T

    $default  reduce using rule 76 ($@27)

    $@27  go to state 128


State 111

   64 assign: identifiers '=' $@22 relationalCond ';' .

    $default  reduce using rule 64 (assign)


State 112

   65 assign: identifiers '(' Arg ')' ';' .

    $default  reduce using rule 65 (assign)


State 113

   43 funcCode: printff $@17 '(' STRLT ')' . ';'

    ';'  shift, and go to state 129


State 114

   45 funcCode: scanff $@18 '(' STRLT ',' . '&' identifiers ')' ';'

    '&'  shift, and go to state 130


State 115

   31 funcReturn: RETURN NUM $@12 . ';'

    ';'  shift, and go to state 131


State 116

   32 funcReturn: RETURN identifiers ';' .

    $default  reduce using rule 32 (funcReturn)


State 117

   58 B: identifiers '=' $@21 . relationalCond

    NUM          shift, and go to state 83
    identifiers  shift, and go to state 84
    '('          shift, and go to state 76

    relationalCond  go to state 132
    F               go to state 80
    T               go to state 81
    Q               go to state 82


State 118

   82 Q: identifiers $@29 arrayFuncArg .

    $default  reduce using rule 82 (Q)


State 119

   67 relationalCond: relationalCond . '+' $@23 relationalCond
   69               | relationalCond . '-' $@24 relationalCond
   80 Q: '(' $@28 relationalCond . ')'

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106
    ')'  shift, and go to state 133


State 120

   52 logicalCond: logicalCond AND B .

    $default  reduce using rule 52 (logicalCond)


State 121

   53 logicalCond: logicalCond OR B .

    $default  reduce using rule 53 (logicalCond)


State 122

   38 funcCode: IF $@13 '(' logicalCond ')' $@14 . '{' $@15 funcCode '}' $@16 EL

    '{'  shift, and go to state 134


State 123

   67 relationalCond: relationalCond '+' $@23 . relationalCond

    NUM          shift, and go to state 83
    identifiers  shift, and go to state 84
    '('          shift, and go to state 76

    relationalCond  go to state 135
    F               go to state 80
    T               go to state 81
    Q               go to state 82


State 124

   69 relationalCond: relationalCond '-' $@24 . relationalCond

    NUM          shift, and go to state 83
    identifiers  shift, and go to state 84
    '('          shift, and go to state 76

    relationalCond  go to state 136
    F               go to state 80
    T               go to state 81
    Q               go to state 82


State 125

   56 B: relationalCond relop relationalCond .
   67 relationalCond: relationalCond . '+' $@23 relationalCond
   69               | relationalCond . '-' $@24 relationalCond

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106

    $default  reduce using rule 56 (B)


State 126

   72 F: F '*' $@25 . F

    NUM          shift, and go to state 83
    identifiers  shift, and go to state 84
    '('          shift, and go to state 76

    F  go to state 137
    T  go to state 81
    Q  go to state 82


State 127

   74 F: F '/' $@26 . F

    NUM          shift, and go to state 83
    identifiers  shift, and go to state 84
    '('          shift, and go to state 76

    F  go to state 138
    T  go to state 81
    Q  go to state 82


State 128

   77 T: T '^' $@27 . T

    NUM          shift, and go to state 83
    identifiers  shift, and go to state 84
    '('          shift, and go to state 76

    T  go to state 139
    Q  go to state 82


State 129

   43 funcCode: printff $@17 '(' STRLT ')' ';' .

    $default  reduce using rule 43 (funcCode)


State 130

   45 funcCode: scanff $@18 '(' STRLT ',' '&' . identifiers ')' ';'

    identifiers  shift, and go to state 140


State 131

   31 funcReturn: RETURN NUM $@12 ';' .

    $default  reduce using rule 31 (funcReturn)


State 132

   58 B: identifiers '=' $@21 relationalCond .
   67 relationalCond: relationalCond . '+' $@23 relationalCond
   69               | relationalCond . '-' $@24 relationalCond

    '+'  shift, and go to state 105
    '-'  shift, and go to state 106

    $default  reduce using rule 58 (B)


State 133

   80 Q: '(' $@28 relationalCond ')' .

    $default  reduce using rule 80 (Q)


State 134

   38 funcCode: IF $@13 '(' logicalCond ')' $@14 '{' . $@15 funcCode '}' $@16 EL

    $default  reduce using rule 36 ($@15)

    $@15  go to state 141


State 135

   67 relationalCond: relationalCond . '+' $@23 relationalCond
   67               | relationalCond '+' $@23 relationalCond .
   69               | relationalCond . '-' $@24 relationalCond

    $default  reduce using rule 67 (relationalCond)


State 136

   67 relationalCond: relationalCond . '+' $@23 relationalCond
   69               | relationalCond . '-' $@24 relationalCond
   69               | relationalCond '-' $@24 relationalCond .

    $default  reduce using rule 69 (relationalCond)


State 137

   72 F: F . '*' $@25 F
   72  | F '*' $@25 F .
   74  | F . '/' $@26 F

    $default  reduce using rule 72 (F)


State 138

   72 F: F . '*' $@25 F
   74  | F . '/' $@26 F
   74  | F '/' $@26 F .

    $default  reduce using rule 74 (F)


State 139

   77 T: T . '^' $@27 T
   77  | T '^' $@27 T .

    '^'  shift, and go to state 110

    $default  reduce using rule 77 (T)


State 140

   45 funcCode: scanff $@18 '(' STRLT ',' '&' identifiers . ')' ';'

    ')'  shift, and go to state 142


State 141

   38 funcCode: IF $@13 '(' logicalCond ')' $@14 '{' $@15 . funcCode '}' $@16 EL

    IF           shift, and go to state 45
    INT          shift, and go to state 5
    FLOAT        shift, and go to state 6
    CHAR         shift, and go to state 7
    VOID         shift, and go to state 8
    identifiers  shift, and go to state 46
    printff      shift, and go to state 47
    scanff       shift, and go to state 48

    IF           [reduce using rule 46 (funcCode)]
    INT          [reduce using rule 46 (funcCode)]
    FLOAT        [reduce using rule 46 (funcCode)]
    CHAR         [reduce using rule 46 (funcCode)]
    VOID         [reduce using rule 46 (funcCode)]
    identifiers  [reduce using rule 46 (funcCode)]
    printff      [reduce using rule 46 (funcCode)]
    scanff       [reduce using rule 46 (funcCode)]
    $default     reduce using rule 46 (funcCode)

    datatypes  go to state 49
    funcCode   go to state 143
    assign     go to state 51


State 142

   45 funcCode: scanff $@18 '(' STRLT ',' '&' identifiers ')' . ';'

    ';'  shift, and go to state 144


State 143

   38 funcCode: IF $@13 '(' logicalCond ')' $@14 '{' $@15 funcCode . '}' $@16 EL
   41         | funcCode . funcCode

    IF           shift, and go to state 45
    INT          shift, and go to state 5
    FLOAT        shift, and go to state 6
    CHAR         shift, and go to state 7
    VOID         shift, and go to state 8
    identifiers  shift, and go to state 46
    printff      shift, and go to state 47
    scanff       shift, and go to state 48
    '}'          shift, and go to state 145

    IF           [reduce using rule 46 (funcCode)]
    INT          [reduce using rule 46 (funcCode)]
    FLOAT        [reduce using rule 46 (funcCode)]
    CHAR         [reduce using rule 46 (funcCode)]
    VOID         [reduce using rule 46 (funcCode)]
    identifiers  [reduce using rule 46 (funcCode)]
    printff      [reduce using rule 46 (funcCode)]
    scanff       [reduce using rule 46 (funcCode)]
    '}'          [reduce using rule 46 (funcCode)]

    datatypes  go to state 49
    funcCode   go to state 60
    assign     go to state 51


State 144

   45 funcCode: scanff $@18 '(' STRLT ',' '&' identifiers ')' ';' .

    $default  reduce using rule 45 (funcCode)


State 145

   38 funcCode: IF $@13 '(' logicalCond ')' $@14 '{' $@15 funcCode '}' . $@16 EL

    $default  reduce using rule 37 ($@16)

    $@16  go to state 146


State 146

   38 funcCode: IF $@13 '(' logicalCond ')' $@14 '{' $@15 funcCode '}' $@16 . EL

    ELSE  shift, and go to state 147

    $default  reduce using rule 50 (EL)

    EL  go to state 148


State 147

   49 EL: ELSE . $@19 '{' $@20 funcCode '}'

    $default  reduce using rule 47 ($@19)

    $@19  go to state 149


State 148

   38 funcCode: IF $@13 '(' logicalCond ')' $@14 '{' $@15 funcCode '}' $@16 EL .

    $default  reduce using rule 38 (funcCode)


State 149

   49 EL: ELSE $@19 . '{' $@20 funcCode '}'

    '{'  shift, and go to state 150


State 150

   49 EL: ELSE $@19 '{' . $@20 funcCode '}'

    $default  reduce using rule 48 ($@20)

    $@20  go to state 151


State 151

   49 EL: ELSE $@19 '{' $@20 . funcCode '}'

    IF           shift, and go to state 45
    INT          shift, and go to state 5
    FLOAT        shift, and go to state 6
    CHAR         shift, and go to state 7
    VOID         shift, and go to state 8
    identifiers  shift, and go to state 46
    printff      shift, and go to state 47
    scanff       shift, and go to state 48

    IF           [reduce using rule 46 (funcCode)]
    INT          [reduce using rule 46 (funcCode)]
    FLOAT        [reduce using rule 46 (funcCode)]
    CHAR         [reduce using rule 46 (funcCode)]
    VOID         [reduce using rule 46 (funcCode)]
    identifiers  [reduce using rule 46 (funcCode)]
    printff      [reduce using rule 46 (funcCode)]
    scanff       [reduce using rule 46 (funcCode)]
    $default     reduce using rule 46 (funcCode)

    datatypes  go to state 49
    funcCode   go to state 152
    assign     go to state 51


State 152

   41 funcCode: funcCode . funcCode
   49 EL: ELSE $@19 '{' $@20 funcCode . '}'

    IF           shift, and go to state 45
    INT          shift, and go to state 5
    FLOAT        shift, and go to state 6
    CHAR         shift, and go to state 7
    VOID         shift, and go to state 8
    identifiers  shift, and go to state 46
    printff      shift, and go to state 47
    scanff       shift, and go to state 48
    '}'          shift, and go to state 153

    IF           [reduce using rule 46 (funcCode)]
    INT          [reduce using rule 46 (funcCode)]
    FLOAT        [reduce using rule 46 (funcCode)]
    CHAR         [reduce using rule 46 (funcCode)]
    VOID         [reduce using rule 46 (funcCode)]
    identifiers  [reduce using rule 46 (funcCode)]
    printff      [reduce using rule 46 (funcCode)]
    scanff       [reduce using rule 46 (funcCode)]
    '}'          [reduce using rule 46 (funcCode)]

    datatypes  go to state 49
    funcCode   go to state 60
    assign     go to state 51


State 153

   49 EL: ELSE $@19 '{' $@20 funcCode '}' .

    $default  reduce using rule 49 (EL)
